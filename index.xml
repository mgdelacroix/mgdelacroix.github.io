<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Core dump</title>
    <link>http://mgdelacroix.es/index.xml</link>
    <description>Recent content on Core dump</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Jul 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://mgdelacroix.es/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating an executable file from a python script</title>
      <link>http://mgdelacroix.es/post/creating-an-executable-file-from-a-python-script/</link>
      <pubDate>Sun, 23 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://mgdelacroix.es/post/creating-an-executable-file-from-a-python-script/</guid>
      <description>&lt;p&gt;Recently I wrote about how
to
&lt;a href=&#34;http://mgdelacroix.es/post/deploying-a-python-script-without-virtualenv&#34;&gt;deploy a python script without virtualenv&lt;/a&gt;. This
method takes advantage of the idea of installing the script&amp;rsquo;s
dependencies in a local directory using &lt;code&gt;pip&lt;/code&gt; and wraps them and our
code with a simple &lt;code&gt;shell&lt;/code&gt; script. The result was good, but you still
needed to deploy a directory with your source code, another one with
the dependencies and the wrapper script with those paths fixed, which
will be the one to run. Good, but not ideal.&lt;/p&gt;

&lt;p&gt;Right after publishing that post, &lt;a href=&#34;https://anler.me/&#34;&gt;a colleague&lt;/a&gt;
showed
me
&lt;a href=&#34;https://docs.python.org/3.6/library/zipapp.html&#34;&gt;the zipapp module&lt;/a&gt;,
recently added in Python 3.5, which allows you to easily create an
executable zipfile from your source code. The feature of running
python code from a zipfile was added long time ago (refer
to
&lt;a href=&#34;https://blogs.gnome.org/jamesh/2012/05/21/python-zip-files/&#34;&gt;this article&lt;/a&gt; to
find out more about the specific PEPs), but I wasn&amp;rsquo;t aware of its
existence. As soon as I read through the module&amp;rsquo;s documentation, I
decided to try and mix both ideas, bundling in a zipfile both the
source code of a script and its dependencies.&lt;/p&gt;

&lt;p&gt;All the literature I found achieved this modifying the &lt;code&gt;sys.path&lt;/code&gt; of
the script, but my goal was to do it without explicitly touching the
dependencies, just playing with the packaging process. The only
requirement for the &lt;code&gt;zipapp&lt;/code&gt; module to work is to have a &lt;code&gt;__main__.py&lt;/code&gt;
file on your sources folder with a valid entrypoint, which is the one
that python will run when you execute the file.&lt;/p&gt;

&lt;p&gt;As running Python code from a zipfile can be done since Python 2.6,
Python 3 (in fact, 3.5 or greater) is only required to be used in the
line that calls the &lt;code&gt;zipapp&lt;/code&gt; module. Through this article I&amp;rsquo;m going to
call &lt;code&gt;python3&lt;/code&gt; in the code examples for consistency, but it is only
needed at that precise step.&lt;/p&gt;

&lt;p&gt;So imagine we have a script with the following layout:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;repo
├── myscript
│   ├── __main__.py
│   └── myscript.py
└── requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the main function of the script is called &lt;code&gt;entrypoint&lt;/code&gt;, for
example, the contents of the &lt;code&gt;__main__.py&lt;/code&gt; would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from myscript import entrypoint

entrypoint()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the script to be able to find the dependencies, we are going to
put them right in the sources directory. This way, they will be in the
default &lt;code&gt;PYTHONPATH&lt;/code&gt;, and we will not need to touch the code&amp;rsquo;s
&lt;code&gt;sys.path&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To keep the original source code clean, we will create a &lt;code&gt;dist&lt;/code&gt;
temporal folder, that we can remove after creating the executable
file. In this folder we will copy our source code, and we will install
our dependencies locally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir dist
cp -r myscript/* dist
pip3 install -r requirements.txt --upgrade --system --target dist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, we should be able to run our program directly using the
following line, without needing to touch the &lt;code&gt;PYTHONPATH&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 dist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, to create the executable zipfile, just run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 -m zipapp -p &#39;/usr/bin/env python3&#39; -o myscript.bin dist
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;-m&lt;/code&gt; tells Python to run the &lt;code&gt;zipapp&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;-p&lt;/code&gt; specifies
the &lt;a href=&#34;https://en.wikipedia.org/wiki/Shebang_(Unix)&#34;&gt;shebang&lt;/a&gt; of the
header of the generated executable zipfile. If your script uses
Python 2 instead of Python 3, just modify that line.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;-o&lt;/code&gt; specifies the name of the output file. The extension is
totally optional. I prefer to use no extension at all.&lt;/li&gt;
&lt;li&gt;The last parameter is the directory of the code you want to bundle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The output of this command should leave you with a &lt;code&gt;myscript.bin&lt;/code&gt;
file, perfectly portable and whose only requirement is the python
interpreter that you specified in the &lt;code&gt;-p&lt;/code&gt; argument on its creation.&lt;/p&gt;

&lt;p&gt;You can even open the file with any text editor to see how it is
basically a text file with our shebang, source code files and
dependencies, all concatenated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying a python script without virtualenv</title>
      <link>http://mgdelacroix.es/post/deploying-a-python-script-without-virtualenv/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://mgdelacroix.es/post/deploying-a-python-script-without-virtualenv/</guid>
      <description>&lt;p&gt;Lately I&amp;rsquo;ve been writing a lot of python to script some common processes in a large infrastructure. Those scripts require some python libraries which are not part of the standard library nor installed by default in all systems. For example, I love how &lt;a href=&#34;http://docopt.org/&#34;&gt;docopt&lt;/a&gt; manages the arguments of a python script, or using the &lt;code&gt;YAML&lt;/code&gt; format for my config files instead of &lt;code&gt;INI&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;During the development stage, I usually manage those dependencies using &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt;, but I would like my deployment to require only &lt;code&gt;python3&lt;/code&gt; installed in the remote machine.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip&lt;/code&gt; allows us to download the dependencies to a local directory running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip3 install -r requirements.txt --upgrade --system --target python_deps
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;upgrade&lt;/code&gt;: we use this flag to download not only the required dependency, but all the transitive dependencies that this one requires.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;system&lt;/code&gt;: by default, &lt;code&gt;pip&lt;/code&gt; installs the packages following the &lt;em&gt;user scheme&lt;/em&gt;, which is a specific directory structure for the interpreter to find the packages when running as a specific user. This flag modifies this behaviour, using a scheme that we point the interpreter to.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt;: we use this flag to tell &lt;code&gt;pip&lt;/code&gt; where we want the dependencies to be downloaded.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After installing the packages to a specific directory, we need to add that directory to our &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable when running the interpreter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PYTHONPATH=`pwd`/python_deps python3 main.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To wrap all of this, we can create a simple script to run our python program, that searchs for the dependencies directory, installs them if they are not there and then runs the program with the &lt;code&gt;PYTHONPATH&lt;/code&gt; variable set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/usr/bin/env bash

# Set the PYTHONPATH environment variable. Using export will make the variable
# available for the rest of the script
export PYTHONPATH=`pwd`/python_deps

# If the python_deps directory doesn&#39;t exist, we download the dependencies there
if [[ ! -d &amp;quot;$PYTHONPATH&amp;quot; ]]; then
    pip3 install -r requirements.txt --upgrade --system --target $PYTHONPATH
fi

python3 src/main.py $@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now upload the script and run it from any system knowing that the only thing we need is the &lt;code&gt;python3&lt;/code&gt; interpreter to be installed.&lt;/p&gt;

&lt;p&gt;An improvement for this method would be to directly create a debian package, but that&amp;rsquo;s for the next post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enhance SQLite output</title>
      <link>http://mgdelacroix.es/post/enhance-sqlite-output/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://mgdelacroix.es/post/enhance-sqlite-output/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been doing some development in &lt;a href=&#34;https://github.com/baoqu&#34;&gt;Baoqu&lt;/a&gt; with &lt;a href=&#34;https://www.sqlite.org&#34;&gt;SQLite&lt;/a&gt; recently, and one of the problems I&amp;rsquo;ve faced is that the default output from a query in the SQLite client is too basic, almost confusing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;sqlite&amp;gt; select * from users;
1|Ramira
2|Maria
3|Yamilo
4|Mario
5|Pérez-Reverte
6|Yisus
7|Miguel
8|Marta
9|andy
10|lol
11|lol2
12|lolaso
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a simple query, let&amp;rsquo;s complicate it a little more:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;sqlite&amp;gt; select * from users as u
          inner join users_circles as uc
            on u.id=uc.&amp;quot;user-id&amp;quot;
          inner join circles as c
            on uc.&amp;quot;circle-id&amp;quot;=c.id;
1|Ramira|1|1|1|1|1|3|3
2|Maria|2|1|1|1|1|3|3
3|Yamilo|3|1|1|1|1|3|3
4|Mario|4|2|2|1|1|3|3
5|Pérez-Reverte|5|2|2|1|1|3|3
6|Yisus|6|2|2|1|1|3|3
1|Ramira|1|3|3|1|2|3|9
2|Maria|2|3|3|1|2|3|9
3|Yamilo|3|3|3|1|2|3|9
4|Mario|4|3|3|1|2|3|9
5|Pérez-Reverte|5|3|3|1|2|3|9
6|Yisus|6|3|3|1|2|3|9
7|Miguel|7|4|4|1|1|3|3
8|Marta |8|4|4|1|1|3|3
9|andy|9|4|4|1|1|3|3
10|lol|10|5|5|1|1|3|
11|lol2|11|5|5|1|1|3|
7|Miguel|7|3|3|1|2|3|9
8|Marta |8|3|3|1|2|3|9
9|andy|9|3|3|1|2|3|9
12|lolaso|12|5|5|1|1|3|
1|Ramira|1|9|9|1|3|3|
2|Maria|2|9|9|1|3|3|
3|Yamilo|3|9|9|1|3|3|
4|Mario|4|9|9|1|3|3|
5|Pérez-Reverte|5|9|9|1|3|3|
6|Yisus|6|9|9|1|3|3|
7|Miguel|7|9|9|1|3|3|
8|Marta |8|9|9|1|3|3|
9|andy|9|9|9|1|3|3|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is simply unreadable, and not only because almost all the columns are plain integers, but the untabbed layout and the lack of column names only makes it worst.&lt;/p&gt;

&lt;p&gt;Luckly, the SQLite client provides us with some options we can activate to improve this. In the client, run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;sqlite&amp;gt; .headers on
sqlite&amp;gt; .mode column
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, the output is much more readable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;sqlite&amp;gt; select * from users as u
          inner join users_circles as uc
            on u.id=uc.&amp;quot;user-id&amp;quot;;
id          name        user-id     circle-id
----------  ----------  ----------  ----------
1           Ramira      1           1
2           Maria       2           1
3           Yamilo      3           1
4           Mario       4           2
5           Perez-Rev   5           2
6           Yisus       6           2

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the &lt;code&gt;.width&lt;/code&gt; option to adjust each column width:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;sqlite&amp;gt; .width 2 14 7 9
sqlite&amp;gt; select * from users as u
          inner join users_circles as uc
            on u.id=uc.&amp;quot;user-id&amp;quot;;
id  name            user-id  circle-id
--  --------------  -------  ---------
1   Ramira          1        1
2   Maria           2        1
3   Yamilo          3        1
4   Mario           4        2
5   Perez-Reverte   5        2
6   Yisus           6        2

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want this commands to run each time you use the SQLite client, just write them to a &lt;code&gt;$HOME/.sqliterc&lt;/code&gt; file. You can find more info about this commands at &lt;a href=&#34;https://www.sqlite.org/cli.html#special_commands_to_sqlite3_dot_commands_&#34;&gt;their section in the SQLite documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Encrypt a USB drive with LUKS</title>
      <link>http://mgdelacroix.es/post/encrypt-a-usb-drive-with-luks/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mgdelacroix.es/post/encrypt-a-usb-drive-with-luks/</guid>
      <description>

&lt;p&gt;One of the best options we have to encrypt a USB is to use the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup&#34;&gt;Linux Unified Key Setup&lt;/a&gt; or &lt;strong&gt;LUKS&lt;/strong&gt;. Through this process, we
will format and generate a completely encrypted partition that will require a password to be accesed.&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;The only requirement is the &lt;code&gt;cryptsetup&lt;/code&gt; program, that can be installed through your favourite distribution&amp;rsquo;s package
manager. In the case of Debian/Ubuntu, you just need to run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt install cryptsetup
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;formatting-the-usb&#34;&gt;Formatting the USB&lt;/h3&gt;

&lt;p&gt;Through all this steps we will supose that the drive is identified into the system with &lt;code&gt;/dev/sdb&lt;/code&gt;. You need to find
which name the system gave to your USB drive and use it instead.&lt;/p&gt;

&lt;p&gt;First thing we need to do is to format the device itself with &lt;code&gt;cryptsetup&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cryptsetup -y -v luksFormat /dev/sdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step will be to initialize the volume. Each time we open the volume, the system will create a reference to it
in the &lt;code&gt;/dev/mapper/&lt;/code&gt; directory. The third parameter on the following snippet is the &lt;em&gt;mapper&lt;/em&gt; that the device will have
when opened.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cryptsetup luksOpen /dev/sdb my-encripted-disk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first time we run this command, &lt;code&gt;cryptsetup&lt;/code&gt; will ask for a &lt;em&gt;passphrase&lt;/em&gt; for the volume. After introducing one, it
will create a &lt;code&gt;/dev/mapper/my-encrypted-disk&lt;/code&gt; mapper, that represents our volume unencrypted.&lt;/p&gt;

&lt;p&gt;We can check its state using&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cryptsetup -v status my-encripted-disk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Last thing we need to do is to format the partition using our favourite format. In this example, we will use plain
&lt;code&gt;ext4&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkfs.ext4 /dev/mapper/my-encrypted-disk
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mount-the-volume&#34;&gt;Mount the volume&lt;/h3&gt;

&lt;p&gt;When the mapping is active, we can mount the volume as a normal partition&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mount /dev/mapper/my-encrypted-disk /mnt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unmount-and-extract-the-device&#34;&gt;Unmount and extract the device&lt;/h3&gt;

&lt;p&gt;To extract the device, first we need to unmount the volume, then close the device through &lt;code&gt;cryptsetup&lt;/code&gt; and then we can
safely extract it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;umount /mnt
cryptsetup luksClose my-encrypted-disk
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;summing-up&#34;&gt;Summing up&lt;/h3&gt;

&lt;p&gt;It is not difficult to encrypt and use a USB drive to securely carry around our information. It just requires one step
more than any other drive to be mounted into the system and ready to use.&lt;/p&gt;

&lt;p&gt;Remember that the steps are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;cryptsetup&lt;/code&gt; and &lt;strong&gt;luksOpen&lt;/strong&gt; to create a mapper.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mount&lt;/code&gt; the mapper as a normal volume.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Graphical file managers as &lt;code&gt;nautilus&lt;/code&gt; will even automatically detect and manage this kind of devices, easing the pain of
having to do all the mounting manually.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gogs is now available in spanish!</title>
      <link>http://mgdelacroix.es/post/gogs-is-now-available-in-spanish/</link>
      <pubDate>Sat, 28 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mgdelacroix.es/post/gogs-is-now-available-in-spanish/</guid>
      <description>

&lt;p&gt;This has been the second year I went to &lt;a href=&#34;http://fosdem.org/&#34;&gt;FOSDEM&lt;/a&gt;. Is a great conference to learn, get together with
friends that are spread across the world and enjoy Open Source.&lt;/p&gt;

&lt;p&gt;Being there and seeing the awesome things people were doing made me think about my last contributions to the community
and how shy they are. A lot of times I&amp;rsquo;ve rejected contributing to a project or publishing a project or a library I&amp;rsquo;m
working on due its early stage or the idea of the code or the approach &amp;ldquo;not being good enough&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;My conclusion was this reasoning was bad due the iterative nature of the software. I&amp;rsquo;ve been more worried about
releasing a complete project than releasing something useful and give others the oportunity to improve or modify it,
that is the very nature of the Open Source Software.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mgdelacroix.es/images/gogs-is-now-available-in-spanish_fosdem.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With this thought in mind, I decided to collaborate in an Open Source project as soon as possible to prove myself
wrong. It didn&amp;rsquo;t need to be coding, it could be a simple task, but I wanted to prove that the entry barrier to
collaborate is easy to jump over and anyone with an hour of free time can contribute.&lt;/p&gt;

&lt;p&gt;Then I saw a tweet by the Gogs team that inspired me to translate the application to the spanish language. How difficult
could it be?&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;es&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Glad to see &lt;a href=&#34;https://twitter.com/hashtag/Gogs?src=hash&#34;&gt;#Gogs&lt;/a&gt; Russian and Japanese translations are done by 70% and 80%. &lt;a href=&#34;http://t.co/oBpS3DJ6ye&#34;&gt;pic.twitter.com/oBpS3DJ6ye&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gogs (@gogitservice) &lt;a href=&#34;https://twitter.com/gogitservice/status/561954770207129600&#34;&gt;febrero 1, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Gogs defines itself as a self-hosted git service written in Go. I&amp;rsquo;ve been using it in my own personal server for more
than a year now and it&amp;rsquo;s truly an awesome application.&lt;/p&gt;

&lt;p&gt;They use &lt;a href=&#34;https://crowdin.com/project/gogs&#34;&gt;crowdin&lt;/a&gt; to manage the translations of the project, so I created my account
and started translating. The interface is pretty simple, showing you a string that needs to be translated, some
automatic suggestions and an interface to comment or request context on each string.&lt;/p&gt;

&lt;p&gt;At the other end of the line, the Gogs team member that I know as
&lt;a href=&#34;https://crowdin.com/profile/joe2010xtmf&#34;&gt;@joe2010xtmf&lt;/a&gt; has been precise and quick responding to any doubt that could
raise during the process. He has been my contact with the team and its good to remember that is not only the
collaborator&amp;rsquo;s effort, but the team&amp;rsquo;s one of reviewing, integrating and helping with the process.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve spent more or less five hours on the whole translation, two back there in Brussels and the rest here in Spain, one
of those this exact morning. My point is that translating a project to another language is simple if you are fluent and
is not time consuming, but helps the project to spread and is very rewarding.&lt;/p&gt;

&lt;p&gt;With this small effort I proved myself that is easy to contribute to the Open Source world, anyone can do it spending
just a few hours with little knowledge and is very sastisfying.&lt;/p&gt;

&lt;p&gt;This is not my field, I&amp;rsquo;m not a translator but a coder, so my next contributions have been and will be in that
area. Translating Gogs has been my first step recovering the habit of contribute, and I could not be more proud.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The Gogs spanish translation is waiting for final approval and can be played with in the
&lt;a href=&#34;https://try.gogs.io/&#34;&gt;Gogs live demo&lt;/a&gt; instance and in the &lt;code&gt;development&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/opengov/15876388594/in/pool-fosdem2015&#34;&gt;Image&lt;/a&gt; gently shared by
&lt;a href=&#34;https://www.flickr.com/photos/opengov/&#34;&gt;Deborah Bryant&lt;/a&gt;,
&lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/&#34;&gt;some rights reserved&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;update-4-march-2015&#34;&gt;Update (4 march 2015)&lt;/h3&gt;

&lt;p&gt;The spanish translation is now approved!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mgdelacroix.es/images/gogs-is-now-available-in-spanish_spanish-translation.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Geb 101: Simple Scripts</title>
      <link>http://mgdelacroix.es/post/geb-101-simple-scripts/</link>
      <pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mgdelacroix.es/post/geb-101-simple-scripts/</guid>
      <description>

&lt;p&gt;These days I’m in between projects, so I decided to automate a task related to a web interface and a tedious list shaped as an HTML form. This automation would imply two processes: parsing an HTML page and filling some fields in another page, plus some small and simple processing.&lt;/p&gt;

&lt;p&gt;I had two options, to use HTTP directly through &lt;a href=&#34;https://github.com/jgritman/httpbuilder&#34;&gt;HTTP Builder&lt;/a&gt; or something like that or to code various small scripts with Geb. Of course, I chose the latter.&lt;/p&gt;

&lt;h3 id=&#34;a-little-bit-of-context&#34;&gt;A little bit of context&lt;/h3&gt;

&lt;p&gt;From its webpage:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Geb is a browser automation solution.&lt;/p&gt;

&lt;p&gt;It brings together the power of WebDriver, the elegance of jQuery content selection, the robustness of Page Object
modelling and the expressiveness of the Groovy language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With a simple script, I can have a Firefox or Google Chrome webdriver (among others) up and running quickly, use
jQuery-like selectors to traverse and modify the webpage DOM and process its information with all the power of Groovy.&lt;/p&gt;

&lt;p&gt;And best of all, the dependencies are managed by &lt;a href=&#34;http://groovy.codehaus.org/Grape&#34;&gt;Grape&lt;/a&gt;, so the only thing I need in
any machine to run this scripts is Groovy itself.&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;To run this examples, the only requirements needed are the &lt;strong&gt;Firefox Web Browser&lt;/strong&gt; and the &lt;strong&gt;Groovy Runtime&lt;/strong&gt;, version
2.X or greater.&lt;/p&gt;

&lt;h3 id=&#34;dependencies-and-hello-world&#34;&gt;Dependencies and Hello World&lt;/h3&gt;

&lt;p&gt;First of all, we need to add the dependencies to our script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;@Grab(group=&#39;org.gebish&#39;, module=&#39;geb-core&#39;, version=&#39;0.10.0&#39;)
@Grab(group=&#39;commons-logging&#39;, module=&#39;commons-logging&#39;, version=&#39;1.2&#39;)
@Grab(group=&#39;org.seleniumhq.selenium&#39;, module=&#39;selenium-firefox-driver&#39;, version=&#39;2.43.0&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually, the &lt;code&gt;commons-logging&lt;/code&gt; dependency is transitive to the other two and should be resolved automaticaly, but Groovy
is unable to find the transitive version, so we put the one we found on &lt;a href=&#34;http://search.maven.org/&#34;&gt;Maven Central&lt;/a&gt;
explicitly and problem solved.&lt;/p&gt;

&lt;p&gt;When used inside a script, Geb works with a simple DSL notation. Our &lt;em&gt;hello world&lt;/em&gt; script is going to drive the browser
to the google webpage and fill the form with &amp;ldquo;Hello Geb!&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;@Grab(group=&#39;org.gebish&#39;, module=&#39;geb-core&#39;, version=&#39;0.10.0&#39;)
@Grab(group=&#39;commons-logging&#39;, module=&#39;commons-logging&#39;, version=&#39;1.2&#39;)
@Grab(group=&#39;org.seleniumhq.selenium&#39;, module=&#39;selenium-firefox-driver&#39;, version=&#39;2.43.0&#39;)
import geb.Browser


Browser.drive {
    go &amp;quot;http://google.com&amp;quot;

    $(&amp;quot;#gbqfq&amp;quot;).value(&amp;quot;Hello Geb!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, you can go to your terminal and run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;groovy HelloWorld.groovy
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;selecting-content&#34;&gt;Selecting content&lt;/h3&gt;

&lt;p&gt;Geb uses jQuery-like selectors to access the content of the page through the &lt;code&gt;$&lt;/code&gt; function. This selectors always return
a &lt;code&gt;geb.navigator.Navigator&lt;/code&gt; object that represents one or many elements on the page. This function can be used through
the &lt;code&gt;find&lt;/code&gt; alias.&lt;/p&gt;

&lt;p&gt;The signature of the &lt;code&gt;$&lt;/code&gt; function is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;$([CSS SELECTOR], [INDEX OR RANGE], [ATTRIBUTE / TEXT MATCHERS])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;being all the arguments optional, so the following calls are valid&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;$(&amp;quot;#content h1&amp;quot;)
$(&amp;quot;#content h1&amp;quot;, 0)
$(0)
$(&amp;quot;div&amp;quot;, title: &amp;quot;my-title&amp;quot;)
$(name: &amp;quot;password-input&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can select again over a &lt;code&gt;geb.navigator.Navigator&lt;/code&gt; object, calling &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;find&lt;/code&gt; again&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;div class=&amp;quot;a&amp;quot;&amp;gt;
//   &amp;lt;p class=&amp;quot;b par&amp;quot; data=&amp;quot;validateable&amp;quot;&amp;gt;Something&amp;lt;/p&amp;gt;
// &amp;lt;/div&amp;gt;
// &amp;lt;div class=&amp;quot;a&amp;quot;&amp;gt;
//   &amp;lt;p class=&amp;quot;b par&amp;quot; data=&amp;quot;validateable&amp;quot;&amp;gt;Something more&amp;lt;/p&amp;gt;
// &amp;lt;/div&amp;gt;

$(&amp;quot;.a&amp;quot;).find(&amp;quot;.b&amp;quot;)
assert $(&amp;quot;.a&amp;quot;).find(&amp;quot;.b&amp;quot;) == $(&amp;quot;.a&amp;quot;).$(&amp;quot;.b&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This selectors are iterable too&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;p&amp;gt;Something&amp;lt;/p&amp;gt;
// &amp;lt;p&amp;gt;Something more&amp;lt;/p&amp;gt;

$(&amp;quot;p&amp;quot;).collect {
    it.text()
}
//=&amp;gt; [&#39;Something&#39;, &#39;Something more&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;they expose the following special methods: &lt;code&gt;tag()&lt;/code&gt;, &lt;code&gt;text()&lt;/code&gt; and &lt;code&gt;classes()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;p class=&amp;quot;b par&amp;quot;&amp;gt;Something&amp;lt;/p&amp;gt;
// &amp;lt;p class=&amp;quot;b&amp;quot;&amp;gt;Something more&amp;lt;/p&amp;gt;

def el = $(&amp;quot;.b&amp;quot;, 0)
el.tag()
//=&amp;gt; &#39;p&#39;
el.text()
//=&amp;gt; &#39;Something&#39;
el.classes()
//=&amp;gt; [&#39;b&#39;, &#39;par&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and all their attributes are exposed throught &lt;code&gt;@attribute&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;p class=&amp;quot;b par&amp;quot; data=&amp;quot;validateable&amp;quot;&amp;gt;Something&amp;lt;/p&amp;gt;

def el = $(&amp;quot;.b&amp;quot;, 0)
el.@data
//=&amp;gt; &#39;validateable&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;handling-forms&#34;&gt;Handling forms&lt;/h3&gt;

&lt;p&gt;Geb provides us with tools to manage forms and input fields. Input fields have the method &lt;code&gt;value()&lt;/code&gt; that we can use to
both get the current field value or set our own. Given this code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;form action=&amp;quot;/&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
//   &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot; /&amp;gt;
//   &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; /&amp;gt;
// &amp;lt;/form&amp;gt;

$(&amp;quot;form&amp;quot;, name: &amp;quot;password&amp;quot;).value()
//=&amp;gt; my username
$(&amp;quot;form&amp;quot;, name: &amp;quot;password&amp;quot;).value(&amp;quot;another username&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use value on elements of type input, select or textarea. If we try to set a value on a different type of element,
we will get an &lt;code&gt;UnableToSetElementException&lt;/code&gt; exception.&lt;/p&gt;

&lt;p&gt;To ease working with forms, we can use shortcuts on the &lt;code&gt;Navigator&lt;/code&gt; objects to access the form fields by their name&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;form action=&amp;quot;/&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
//   &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot; /&amp;gt;
//   &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; /&amp;gt;
// &amp;lt;/form&amp;gt;

assert $(&amp;quot;form&amp;quot;).username == &amp;quot;my username&amp;quot;
$(&amp;quot;form&amp;quot;).username = &amp;quot;another username&amp;quot;
$(&amp;quot;form&amp;quot;).password = &amp;quot;mysupersecret&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Special inputs like textarea, select, checkbox, etc. are accessed each one in its particular way. You can find each case
explained in detail in the &lt;a href=&#34;http://www.gebish.org/manual/current/navigator.html#setting_values&#34;&gt;setting values&lt;/a&gt; section
of the documentation.&lt;/p&gt;

&lt;h3 id=&#34;moving-around&#34;&gt;Moving around&lt;/h3&gt;

&lt;p&gt;Among all the possible interactions that we have in Geb, one of the most important ones is the &lt;strong&gt;click&lt;/strong&gt;. Navigator
objects have a &lt;code&gt;click()&lt;/code&gt; method, that simply clicks on the &lt;strong&gt;first element&lt;/strong&gt; of the navigator&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;$(&amp;quot;a&amp;quot;).click()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Geb has tools for waiting to some conditions to happen or some content to appear on the page. This is useful when
following links, when interacting with the page or when working with timers.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;waitFor()&lt;/code&gt; method allows us to wait a certain amount of time&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;waitFor(10)
waitFor(10, 0.5)  // wait up to 10 seconds, with half a second between retries
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and to wait for some closure to return a true object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;waitFor { title.contains(&amp;quot;Search Results&amp;quot;) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To finally close the browser, we use the &lt;code&gt;quit()&lt;/code&gt; method of the DSL&lt;/p&gt;

&lt;h3 id=&#34;geb-and-javascript&#34;&gt;Geb and Javascript&lt;/h3&gt;

&lt;p&gt;If we use Geb with the DSL, we have a &lt;code&gt;js&lt;/code&gt; object to both interact with the data and execute code in Javascript.&lt;/p&gt;

&lt;h4 id=&#34;accessing-variables&#34;&gt;Accessing variables&lt;/h4&gt;

&lt;p&gt;Any Javascript global varialbe is accesible by name&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;html&amp;gt;
//   &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
//     var aVariable = 1;
//   &amp;lt;/script&amp;gt;
// &amp;lt;body&amp;gt;
// &amp;lt;/body&amp;gt;
// &amp;lt;/html&amp;gt;

assert js.aVariable == 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we can even access nested variables&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;assert js.&amp;quot;document.title&amp;quot; == &amp;quot;My Webpage&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;executing-code&#34;&gt;Executing code&lt;/h4&gt;

&lt;p&gt;You can execute arbitrary javascript code through the &lt;code&gt;js&lt;/code&gt; object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;assert js.exec(&#39;return 1 + 1;&#39;) == 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if you want to send arguments to the javascript snippet, they are the first in the &lt;code&gt;exec()&lt;/code&gt; signature&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;assert js.exec(1, 2, &#39;arguments[0] + arguments[1];&#39;) == 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;beyond-the-script&#34;&gt;Beyond the script&lt;/h3&gt;

&lt;p&gt;Geb is awesome to write simple and powerful scripts, but its power doesn’t stop there. If we need bigger and more
complicated logic, Geb provides us with the &lt;code&gt;Driver&lt;/code&gt; and &lt;code&gt;Page&lt;/code&gt; classes and a lot of abstractions way more structured
than a DSL to use.&lt;/p&gt;

&lt;p&gt;Reach &lt;a href=&#34;http://www.gebish.org/manual/current/&#34;&gt;the manual&lt;/a&gt; or the
&lt;a href=&#34;http://www.gebish.org/manual/current/api/&#34;&gt;API documentation&lt;/a&gt; if you want to find more and have fun with Groovy and
Geb.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About to start</title>
      <link>http://mgdelacroix.es/post/about-to-start/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mgdelacroix.es/post/about-to-start/</guid>
      <description>&lt;p&gt;Expect new content here soon&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>