<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geb on Core dump</title>
    <link>http://mgdelacroix.es/tags/geb/index.xml</link>
    <description>Recent content in Geb on Core dump</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://mgdelacroix.es/tags/geb/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Geb 101: Simple Scripts</title>
      <link>http://mgdelacroix.es/post/geb-101-simple-scripts/</link>
      <pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://mgdelacroix.es/post/geb-101-simple-scripts/</guid>
      <description>

&lt;p&gt;These days Iâ€™m in between projects, so I decided to automate a task related to a web interface and a tedious list shaped as an HTML form. This automation would imply two processes: parsing an HTML page and filling some fields in another page, plus some small and simple processing.&lt;/p&gt;

&lt;p&gt;I had two options, to use HTTP directly through &lt;a href=&#34;https://github.com/jgritman/httpbuilder&#34;&gt;HTTP Builder&lt;/a&gt; or something like that or to code various small scripts with Geb. Of course, I chose the latter.&lt;/p&gt;

&lt;h3 id=&#34;a-little-bit-of-context&#34;&gt;A little bit of context&lt;/h3&gt;

&lt;p&gt;From its webpage:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Geb is a browser automation solution.&lt;/p&gt;

&lt;p&gt;It brings together the power of WebDriver, the elegance of jQuery content selection, the robustness of Page Object
modelling and the expressiveness of the Groovy language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With a simple script, I can have a Firefox or Google Chrome webdriver (among others) up and running quickly, use
jQuery-like selectors to traverse and modify the webpage DOM and process its information with all the power of Groovy.&lt;/p&gt;

&lt;p&gt;And best of all, the dependencies are managed by &lt;a href=&#34;http://groovy.codehaus.org/Grape&#34;&gt;Grape&lt;/a&gt;, so the only thing I need in
any machine to run this scripts is Groovy itself.&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;To run this examples, the only requirements needed are the &lt;strong&gt;Firefox Web Browser&lt;/strong&gt; and the &lt;strong&gt;Groovy Runtime&lt;/strong&gt;, version
2.X or greater.&lt;/p&gt;

&lt;h3 id=&#34;dependencies-and-hello-world&#34;&gt;Dependencies and Hello World&lt;/h3&gt;

&lt;p&gt;First of all, we need to add the dependencies to our script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;@Grab(group=&#39;org.gebish&#39;, module=&#39;geb-core&#39;, version=&#39;0.10.0&#39;)
@Grab(group=&#39;commons-logging&#39;, module=&#39;commons-logging&#39;, version=&#39;1.2&#39;)
@Grab(group=&#39;org.seleniumhq.selenium&#39;, module=&#39;selenium-firefox-driver&#39;, version=&#39;2.43.0&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually, the &lt;code&gt;commons-logging&lt;/code&gt; dependency is transitive to the other two and should be resolved automaticaly, but Groovy
is unable to find the transitive version, so we put the one we found on &lt;a href=&#34;http://search.maven.org/&#34;&gt;Maven Central&lt;/a&gt;
explicitly and problem solved.&lt;/p&gt;

&lt;p&gt;When used inside a script, Geb works with a simple DSL notation. Our &lt;em&gt;hello world&lt;/em&gt; script is going to drive the browser
to the google webpage and fill the form with &amp;ldquo;Hello Geb!&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;@Grab(group=&#39;org.gebish&#39;, module=&#39;geb-core&#39;, version=&#39;0.10.0&#39;)
@Grab(group=&#39;commons-logging&#39;, module=&#39;commons-logging&#39;, version=&#39;1.2&#39;)
@Grab(group=&#39;org.seleniumhq.selenium&#39;, module=&#39;selenium-firefox-driver&#39;, version=&#39;2.43.0&#39;)
import geb.Browser


Browser.drive {
    go &amp;quot;http://google.com&amp;quot;

    $(&amp;quot;#gbqfq&amp;quot;).value(&amp;quot;Hello Geb!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, you can go to your terminal and run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;groovy HelloWorld.groovy
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;selecting-content&#34;&gt;Selecting content&lt;/h3&gt;

&lt;p&gt;Geb uses jQuery-like selectors to access the content of the page through the &lt;code&gt;$&lt;/code&gt; function. This selectors always return
a &lt;code&gt;geb.navigator.Navigator&lt;/code&gt; object that represents one or many elements on the page. This function can be used through
the &lt;code&gt;find&lt;/code&gt; alias.&lt;/p&gt;

&lt;p&gt;The signature of the &lt;code&gt;$&lt;/code&gt; function is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;$([CSS SELECTOR], [INDEX OR RANGE], [ATTRIBUTE / TEXT MATCHERS])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;being all the arguments optional, so the following calls are valid&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;$(&amp;quot;#content h1&amp;quot;)
$(&amp;quot;#content h1&amp;quot;, 0)
$(0)
$(&amp;quot;div&amp;quot;, title: &amp;quot;my-title&amp;quot;)
$(name: &amp;quot;password-input&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can select again over a &lt;code&gt;geb.navigator.Navigator&lt;/code&gt; object, calling &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;find&lt;/code&gt; again&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;div class=&amp;quot;a&amp;quot;&amp;gt;
//   &amp;lt;p class=&amp;quot;b par&amp;quot; data=&amp;quot;validateable&amp;quot;&amp;gt;Something&amp;lt;/p&amp;gt;
// &amp;lt;/div&amp;gt;
// &amp;lt;div class=&amp;quot;a&amp;quot;&amp;gt;
//   &amp;lt;p class=&amp;quot;b par&amp;quot; data=&amp;quot;validateable&amp;quot;&amp;gt;Something more&amp;lt;/p&amp;gt;
// &amp;lt;/div&amp;gt;

$(&amp;quot;.a&amp;quot;).find(&amp;quot;.b&amp;quot;)
assert $(&amp;quot;.a&amp;quot;).find(&amp;quot;.b&amp;quot;) == $(&amp;quot;.a&amp;quot;).$(&amp;quot;.b&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This selectors are iterable too&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;p&amp;gt;Something&amp;lt;/p&amp;gt;
// &amp;lt;p&amp;gt;Something more&amp;lt;/p&amp;gt;

$(&amp;quot;p&amp;quot;).collect {
    it.text()
}
//=&amp;gt; [&#39;Something&#39;, &#39;Something more&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;they expose the following special methods: &lt;code&gt;tag()&lt;/code&gt;, &lt;code&gt;text()&lt;/code&gt; and &lt;code&gt;classes()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;p class=&amp;quot;b par&amp;quot;&amp;gt;Something&amp;lt;/p&amp;gt;
// &amp;lt;p class=&amp;quot;b&amp;quot;&amp;gt;Something more&amp;lt;/p&amp;gt;

def el = $(&amp;quot;.b&amp;quot;, 0)
el.tag()
//=&amp;gt; &#39;p&#39;
el.text()
//=&amp;gt; &#39;Something&#39;
el.classes()
//=&amp;gt; [&#39;b&#39;, &#39;par&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and all their attributes are exposed throught &lt;code&gt;@attribute&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;p class=&amp;quot;b par&amp;quot; data=&amp;quot;validateable&amp;quot;&amp;gt;Something&amp;lt;/p&amp;gt;

def el = $(&amp;quot;.b&amp;quot;, 0)
el.@data
//=&amp;gt; &#39;validateable&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;handling-forms&#34;&gt;Handling forms&lt;/h3&gt;

&lt;p&gt;Geb provides us with tools to manage forms and input fields. Input fields have the method &lt;code&gt;value()&lt;/code&gt; that we can use to
both get the current field value or set our own. Given this code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;form action=&amp;quot;/&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
//   &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot; /&amp;gt;
//   &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; /&amp;gt;
// &amp;lt;/form&amp;gt;

$(&amp;quot;form&amp;quot;, name: &amp;quot;password&amp;quot;).value()
//=&amp;gt; my username
$(&amp;quot;form&amp;quot;, name: &amp;quot;password&amp;quot;).value(&amp;quot;another username&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use value on elements of type input, select or textarea. If we try to set a value on a different type of element,
we will get an &lt;code&gt;UnableToSetElementException&lt;/code&gt; exception.&lt;/p&gt;

&lt;p&gt;To ease working with forms, we can use shortcuts on the &lt;code&gt;Navigator&lt;/code&gt; objects to access the form fields by their name&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;form action=&amp;quot;/&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
//   &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot; /&amp;gt;
//   &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; /&amp;gt;
// &amp;lt;/form&amp;gt;

assert $(&amp;quot;form&amp;quot;).username == &amp;quot;my username&amp;quot;
$(&amp;quot;form&amp;quot;).username = &amp;quot;another username&amp;quot;
$(&amp;quot;form&amp;quot;).password = &amp;quot;mysupersecret&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Special inputs like textarea, select, checkbox, etc. are accessed each one in its particular way. You can find each case
explained in detail in the &lt;a href=&#34;http://www.gebish.org/manual/current/navigator.html#setting_values&#34;&gt;setting values&lt;/a&gt; section
of the documentation.&lt;/p&gt;

&lt;h3 id=&#34;moving-around&#34;&gt;Moving around&lt;/h3&gt;

&lt;p&gt;Among all the possible interactions that we have in Geb, one of the most important ones is the &lt;strong&gt;click&lt;/strong&gt;. Navigator
objects have a &lt;code&gt;click()&lt;/code&gt; method, that simply clicks on the &lt;strong&gt;first element&lt;/strong&gt; of the navigator&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;$(&amp;quot;a&amp;quot;).click()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Geb has tools for waiting to some conditions to happen or some content to appear on the page. This is useful when
following links, when interacting with the page or when working with timers.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;waitFor()&lt;/code&gt; method allows us to wait a certain amount of time&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;waitFor(10)
waitFor(10, 0.5)  // wait up to 10 seconds, with half a second between retries
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and to wait for some closure to return a true object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;waitFor { title.contains(&amp;quot;Search Results&amp;quot;) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To finally close the browser, we use the &lt;code&gt;quit()&lt;/code&gt; method of the DSL&lt;/p&gt;

&lt;h3 id=&#34;geb-and-javascript&#34;&gt;Geb and Javascript&lt;/h3&gt;

&lt;p&gt;If we use Geb with the DSL, we have a &lt;code&gt;js&lt;/code&gt; object to both interact with the data and execute code in Javascript.&lt;/p&gt;

&lt;h4 id=&#34;accessing-variables&#34;&gt;Accessing variables&lt;/h4&gt;

&lt;p&gt;Any Javascript global varialbe is accesible by name&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// &amp;lt;html&amp;gt;
//   &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
//     var aVariable = 1;
//   &amp;lt;/script&amp;gt;
// &amp;lt;body&amp;gt;
// &amp;lt;/body&amp;gt;
// &amp;lt;/html&amp;gt;

assert js.aVariable == 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we can even access nested variables&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;assert js.&amp;quot;document.title&amp;quot; == &amp;quot;My Webpage&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;executing-code&#34;&gt;Executing code&lt;/h4&gt;

&lt;p&gt;You can execute arbitrary javascript code through the &lt;code&gt;js&lt;/code&gt; object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;assert js.exec(&#39;return 1 + 1;&#39;) == 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if you want to send arguments to the javascript snippet, they are the first in the &lt;code&gt;exec()&lt;/code&gt; signature&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;assert js.exec(1, 2, &#39;arguments[0] + arguments[1];&#39;) == 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;beyond-the-script&#34;&gt;Beyond the script&lt;/h3&gt;

&lt;p&gt;Geb is awesome to write simple and powerful scripts, but its power doesnâ€™t stop there. If we need bigger and more
complicated logic, Geb provides us with the &lt;code&gt;Driver&lt;/code&gt; and &lt;code&gt;Page&lt;/code&gt; classes and a lot of abstractions way more structured
than a DSL to use.&lt;/p&gt;

&lt;p&gt;Reach &lt;a href=&#34;http://www.gebish.org/manual/current/&#34;&gt;the manual&lt;/a&gt; or the
&lt;a href=&#34;http://www.gebish.org/manual/current/api/&#34;&gt;API documentation&lt;/a&gt; if you want to find more and have fun with Groovy and
Geb.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>